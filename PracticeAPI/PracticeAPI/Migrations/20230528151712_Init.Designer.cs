// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PracticeAPI.Data;

#nullable disable

namespace PracticeAPI.Migrations
{
    [DbContext(typeof(PracticeContext))]
    [Migration("20230528151712_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PracticeAPI.Models.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseATK")
                        .HasColumnType("int");

                    b.Property<int>("BaseHP")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("PracticeAPI.Models.GameAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("PracticeAPI.Models.GameAccountCharacter", b =>
                {
                    b.Property<Guid>("GameAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameAccountId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("GameAccountCharacters");
                });

            modelBuilder.Entity("PracticeAPI.Models.GameAccountQuest", b =>
                {
                    b.Property<Guid>("GameAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameAccountId", "QuestId");

                    b.HasIndex("QuestId");

                    b.ToTable("GameAccountQuests");
                });

            modelBuilder.Entity("PracticeAPI.Models.Quest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Quests");
                });

            modelBuilder.Entity("PracticeAPI.Models.GameAccountCharacter", b =>
                {
                    b.HasOne("PracticeAPI.Models.Character", "Character")
                        .WithMany("GameAccounts")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PracticeAPI.Models.GameAccount", "GameAccount")
                        .WithMany("Characters")
                        .HasForeignKey("GameAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("GameAccount");
                });

            modelBuilder.Entity("PracticeAPI.Models.GameAccountQuest", b =>
                {
                    b.HasOne("PracticeAPI.Models.GameAccount", "GameAccount")
                        .WithMany("Quests")
                        .HasForeignKey("GameAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PracticeAPI.Models.Quest", "Quest")
                        .WithMany("GameAccounts")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameAccount");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("PracticeAPI.Models.Character", b =>
                {
                    b.Navigation("GameAccounts");
                });

            modelBuilder.Entity("PracticeAPI.Models.GameAccount", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Quests");
                });

            modelBuilder.Entity("PracticeAPI.Models.Quest", b =>
                {
                    b.Navigation("GameAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
